/*
 * Author: Landon Fuller <landonf@plausiblelabs.com>
 *
 * Copyright (c) 2008-2009 Plausible Labs Cooperative, Inc.
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#import <Foundation/Foundation.h>

/**
 * @ingroup enums
 *
 * This set of constants defines options for PLCrashReporter.
 */
typedef enum {
    /** Set this flag to cause PLCrashReporter to intercept exceptions thrown within the main NSRunLoop before they
      * reach Apple's exception handler. They will be treated with the default behavior given to uncaught exceptions.
      * Use with caution if the client overrides -[NSApplication sendEvent:].
      */
    PLCrashReporterOptionCaptureRunLoopExceptions = (1 << 0),
} PLCrashReporterOptions;

/**
 * @ingroup enums
 *
 * This set of constants defines possible values for the reportType in a post-write callback.
 */
typedef enum {
    /** The report was generated by a UNIX signal, Mach exception, or Objective-C exception, contains full thread
      * information, and will result in termination of the process. */
    PLCrashReportTypeCrash = 0,
    
    /** The report was generated by user request and contains full thread information, and execution will continue
      * normally. */
    PLCrashReportTypeUserRequest = 1,
} PLCrashReportType;

/**
 * @ingroup functions
 *
 * Prototype of a callback function used to execute additional user code with signal information as provided
 * by PLCrashReporter. Called upon completion of crash handling, after the crash report has been written to disk.
 *
 * @param info The signal info.
 * @param uap The crash's threads context.
 * @param context The API client's supplied context value.
 *
 * @sa @ref async_safety
 * @sa PLCrashReporter::setReporterCallbacks:
 */
typedef void (*PLCrashReporterPostCrashSignalCallback)(siginfo_t *info, ucontext_t *uap, void *context);

/**
 * @ingroup functions
 *
 * Prototype of a callback function used to execute additional user code after a report has been written
 * to disk. If a report is written, this callback will always be called before the PostCrashSignal
 * callback. This callback is called only after all data is completely written to disk. In case of
 * a user-generated report, no other callback will be made.
 *
 * @param name The location of the report that was saved. This is a full path.
 * @param type The type of report that was written.
 * @param context The API client's supplied context value.
 * @sa PLCrashReporter::setReporterCallbacks:
 */
typedef void (*PLCrashReporterPostWriteReportCallback)(const char * const path, PLCrashReportType type, void *context);

/**
 * @ingroup types
 *
 * This structure contains callbacks supported by PLCrashReporter to allow the host application to perform
 * additional tasks prior to program termination after a crash has occured.
 *
 * @sa @ref async_safety
 */
typedef struct PLCrashReporterCallbacks {
    /** The version number of this structure. If not one of the defined version numbers for this type, the behavior
     * is undefined. The current version of this structure is 1. */
    uint16_t version;
    
    /** An arbitrary user-supplied context value. This value may be NULL. */
    void *context;

    /** The callback used to report caught signal information. In versions 0 and 1 of this structure, all crashes
     * will be reported via this function. */
    PLCrashReporterPostCrashSignalCallback handleSignal;
    
    /** The callback used to report completion of writing a crash log to disk. Only available in version 1 of this
      * structure. If a version 0 structure is used, or this field is set to NULL, no callback is made. */
    PLCrashReporterPostWriteReportCallback writeReport;
} PLCrashReporterCallbacks;

@interface PLCrashReporter : NSObject {
@private
    /** YES if the crash reporter has been enabled */
    BOOL _enabled;

    /** Application identifier */
    NSString *_applicationIdentifier;

    /** Application version */
    NSString *_applicationVersion;

    /** Application short version */
    NSString *_applicationShortVersion;

    /** Application startup timestamp */
    time_t _applicationStartupTimestamp;
  
    /** GUID for the crash report */
    NSString *_crashReportGUID;
  
    /** Path to the crash reporter internal data directory */
    NSString *_crashReportDirectory;
}

+ (PLCrashReporter *) sharedReporter;

- (BOOL) hasPendingCrashReport;
- (BOOL) hasReportWithName: (NSString *) reportName;

- (NSData *) loadPendingCrashReportData;
- (NSData *) loadPendingCrashReportDataAndReturnError: (NSError **) outError;
- (NSData *) loadReportWithName: (NSString *) reportName;
- (NSData *) loadReportWithName: (NSString *) reportName andReturnError: (NSError **) outError;

- (BOOL) purgePendingCrashReport;
- (BOOL) purgePendingCrashReportAndReturnError: (NSError **) outError;
- (BOOL) purgeReportWithName: (NSString *) reportName;
- (BOOL) purgeReportWithName: (NSString *) reportName andReturnError: (NSError **) outError;

- (BOOL) enableCrashReporter;
- (BOOL) enableCrashReporterAndReturnError: (NSError **) outError;
- (BOOL) enableCrashReporterWithOptions: (PLCrashReporterOptions) options andReturnError: (NSError **) outError;

- (void) setCrashCallbacks: (PLCrashReporterCallbacks *) callbacks DEPRECATED_ATTRIBUTE;
- (void) setReporterCallbacks: (PLCrashReporterCallbacks *) callbacks;

- (NSData *) generateReportData;
- (BOOL) generateReportWithName: (NSString *) reportName;

@end
